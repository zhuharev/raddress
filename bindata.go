// Code generated by go-bindata.
// sources:
// regions.json
// DO NOT EDIT!

package raddress

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _regionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x58\xcd\x6e\xdb\x66\x10\x7c\x15\x43\x67\x1b\x11\xc5\x3f\x29\xaf\x52\xf4\x50\x20\x3d\xf4\xd0\x1e\x7a\x2d\x0a\x44\x0c\xda\x06\x48\x51\xa9\x46\x8b\x1a\x8a\x22\x5b\x0a\x02\x9f\x5a\xeb\x37\x51\x44\x49\x7e\x85\x8f\x6f\xd4\xd9\x25\x29\x8b\xd6\x2c\x9d\x8b\x05\x18\xdf\x70\x77\x67\x67\xe7\x5b\xf2\xab\x9f\x1a\x3f\x7c\xf3\xfd\xb7\x8d\xe7\x0d\xd7\x77\xcb\xec\x8d\x5b\xb8\x55\xd6\x3b\x73\x37\xf8\xe9\xba\xfb\xc6\x79\xe3\xc7\xef\x5e\x34\x9e\x7b\xe7\x8d\x17\xf2\xdb\xfa\xf9\xfc\x18\x90\x66\x89\x9b\xba\xcf\x27\xc7\x83\xe2\x78\x48\x8f\xe3\xe4\xc6\xad\x05\xb6\xc9\x5e\xca\x3f\x4a\x58\xab\xc5\x71\xdb\xec\x55\xf6\x52\x51\x53\xc9\x6d\xef\x66\x2e\x3d\x60\xda\x05\x26\xa8\x60\x70\xfe\x17\x3c\x7a\x27\xf5\x20\xee\xef\x16\xba\x53\xa0\xfd\x2a\xba\x9b\x25\x92\x5a\xfe\x0c\x03\xeb\x37\x19\x29\x7f\xe2\xe4\x6b\x9c\xdf\x23\x83\x04\x7f\xbb\x5a\xf3\xee\x84\xa2\xb2\xd4\xb8\x0a\x46\xb2\x48\x19\x60\xc4\x5a\x5a\x81\xcb\x6e\x78\x15\x2c\x02\xf6\xec\x64\x5b\x1c\x23\xc4\xf6\x90\xe2\x9a\x34\xdd\x67\xdd\xb8\x44\x82\x53\xb7\x44\xff\xb6\x00\x59\x5d\xf1\x7d\x16\xee\x12\x87\xb4\x3c\xb7\xd0\xc6\x9b\x05\x06\x8c\xd9\x1c\xbd\x57\xbc\x89\x0c\x59\x3f\x2f\x0b\x42\x77\xa0\xf7\xa3\x85\x8c\x58\xc6\x7f\x21\x4b\x99\x08\xab\x8b\x65\xb8\xf6\x31\xe8\x6f\x37\x47\xb8\x55\x21\x74\x0d\xd5\xaf\x06\x8b\x3b\x4c\xb4\xff\x20\xc4\x4c\xe6\x41\x50\x07\xd1\xb2\x41\x89\x43\xd6\x9a\x2b\x37\x57\xc9\xef\x11\xdf\x28\x32\x66\x45\x5e\xc9\x98\x40\x09\xaf\x51\x1b\x57\x42\xc4\xca\xbc\x42\x4e\x1b\xc0\x12\x2b\x58\x9b\x25\x39\xc8\x8b\x04\x56\x34\x84\x64\x2f\x64\x64\xd0\x58\x79\xc4\x91\x9c\x1e\x65\x10\xb3\x0c\x06\x0a\x94\xa7\xac\xb5\x84\x5a\x4d\xd1\x49\xcf\x9f\xb0\x85\xef\x6d\x68\xe1\x6d\x26\x44\x05\x65\xaf\x4c\x29\x05\x4d\xc6\xb2\xa0\xb6\xd9\x6f\x38\x9f\x98\x7d\x0d\x3c\xa6\x8b\x81\xd2\x35\x15\x2c\x54\x35\x17\xca\x6e\x91\x26\xd8\x57\x65\x5a\x94\x75\x0c\xca\x54\x9b\x29\x2d\xd7\x6b\x72\x92\x56\x18\xf6\x95\x8e\x90\xa5\xac\x80\x5a\xf7\x40\x2c\xa2\x0e\xe5\x33\x17\x1c\xe0\x10\xcc\xe5\x34\x3b\x8f\x67\xb7\x2f\xec\x1a\x28\x2b\x4e\x40\x3b\xa2\xac\x76\x75\x62\x96\x07\xf5\xd1\x8b\xc9\xa7\x3a\x78\xc0\xc3\x43\x6b\xd0\xf4\x3a\x1c\x88\xf7\xc2\x5c\xec\x0b\x26\x28\xa7\x3c\x3a\xc1\x59\x08\x6a\x62\x6f\xd1\xbf\x2f\x19\x91\x20\x66\xfc\xbe\x05\xf2\x1e\x8d\xf8\x95\x63\xda\x2c\xe2\x50\x6d\x53\xae\x89\x9a\xea\xa8\x07\x0e\x55\x9f\xca\xe2\xbf\x2e\x3d\x95\x00\xbd\x36\x87\xea\xef\x4b\x11\x1a\x97\x35\x95\x99\xa0\x24\x35\x98\xe6\x99\x5b\x1c\x8c\x86\x5a\x64\x79\xd6\x96\x72\x48\x87\x7e\xa8\x4d\xde\xd6\xd0\x10\x52\x51\xbf\xd3\x96\xe5\xa4\x2b\x19\x7d\x37\x3a\x78\x92\xcf\x11\x6b\xf7\x11\xa8\xa7\x96\x87\x90\x32\xf8\x4e\xb9\x7b\x12\x6b\x44\x16\xac\xf0\xb3\xc6\x61\x7b\x27\x08\xe9\x18\x8c\xcc\xa1\x0d\xe9\x25\x37\x52\xfb\xda\xb9\x59\x3e\x3e\x16\x36\x62\x55\x0a\x36\xad\xeb\x21\xed\xfd\xb5\xc6\xfb\x24\x7f\x2d\x5c\x9b\x45\xbb\x56\xcb\xdc\x9a\xb6\x10\x76\x28\x4a\xe5\xbf\xd5\xfd\xd1\x34\x94\x90\x8d\xce\xf5\x13\x0a\x8d\xa8\xb9\xdf\x14\x3b\x6a\x0d\x8e\x2e\xff\x37\x58\x36\x3f\xd5\xe8\x3a\xa2\x0b\xe7\x58\x2e\xc1\xea\x45\x5f\x45\xd1\x49\x1d\xeb\x5a\xb3\xc9\x92\x0b\x25\x35\x51\x62\x0b\x01\x1c\x8f\x6e\x9b\x15\x38\x2e\x6e\xcf\xda\x12\x03\x23\xac\xbc\x00\x9c\x3d\x73\x77\xf9\xa2\x23\xe6\xf2\xec\xd4\x5d\x02\xd6\x8d\x02\x9c\xef\x27\x56\x58\xda\xc7\x31\xa6\x69\xa5\x7e\x56\xa7\xd5\x28\x62\x97\xc3\x58\x17\x04\x41\xef\x72\xcc\x08\xf0\x72\xab\xbb\x10\x1b\x49\x95\x4b\xea\x92\x74\x99\x1d\x8b\x16\x81\xb2\xd5\x1f\xd1\xa9\x19\xeb\xc6\x3c\x57\x3f\xb9\x97\x27\xd4\xac\xb3\x2d\xba\x5f\x4e\x54\x2b\xb3\x3a\x0e\xe8\xe5\x33\xd1\x66\xab\xc6\x8c\xad\xdd\xa3\xee\x30\xc9\x99\xb3\x62\x75\x78\x2c\x7b\xe9\x88\x9b\xcc\xbf\x26\x58\x1c\xed\xf7\xd1\x98\xbe\xda\x4d\xb0\x9f\xea\x2d\xf5\xb8\x8e\x98\x47\xf8\x43\xd6\x35\xb3\x5f\x71\x8b\x29\xe7\x3d\xf4\x96\xbf\x67\x27\xe6\x46\xe9\x51\x9f\x7b\xaf\xf5\xf4\x6a\x5f\x3c\x62\x3a\xd7\x1f\x0e\xef\x02\x25\x92\xaa\x23\x66\x53\x22\xd8\x8d\xae\x5f\x54\xcb\x1d\xc6\xcc\x07\xf5\xab\x24\x7b\x73\xa1\x1b\xca\x4e\xaf\xac\xa3\xcf\x11\x7d\x64\x91\xe8\x7b\xa2\x2c\xa0\x3b\xb0\xfe\x59\xea\x40\x3e\x68\xda\x42\xe6\xe7\xbf\x7c\x85\xaa\xde\xc7\x74\x12\x6f\xf5\xbb\x43\x4f\x6e\x44\xbb\x13\x81\x81\xc4\xaa\x5f\xe9\xdf\xe3\x6f\x07\x4d\x36\x2f\xb7\x48\x72\x2e\x5f\x1f\x6c\x9c\xc7\xba\x20\x38\xf9\x5e\x91\x1c\x13\xf1\x50\x1d\x65\xff\x4e\x77\x9a\x54\x5e\x45\x6a\x57\x95\x0e\x2b\xf0\x4e\x1a\x8e\x60\xa9\x1a\x84\x41\xcd\xc3\x26\xfb\xf5\xff\x01\x00\x00\xff\xff\xf9\x40\x95\x4c\xa4\x12\x00\x00")

func regionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regionsJson,
		"regions.json",
	)
}

func regionsJson() (*asset, error) {
	bytes, err := regionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regions.json", size: 4772, mode: os.FileMode(432), modTime: time.Unix(1450285914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"regions.json": regionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"regions.json": &bintree{regionsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
